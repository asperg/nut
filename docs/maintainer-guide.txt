NUT Maintainer Guide
____________________
:Author: Arnaud_Quette
:Author Initials: AQ

Introduction
============

...

Mailing lists administration
============================

NUT provides various
link:https://alioth.debian.org/mail/?group_id=30602[mailing list], to support
users and developers. These can administered at the following addresses:

- link:http://lists.alioth.debian.org/cgi-bin/mailman/admin/nut-upsuser[Nut-upsuser]
- link:http://lists.alioth.debian.org/cgi-bin/mailman/admin/nut-upsdev[Nut-upsdev]
- nut-tracker
- nut-packaging

The password is the same for all administrators, and is provided to any new
NUT admin.

Best moderation practices
-------------------------

These are the general rules that apply to mailing list moderation:

- non subscribed:
  - ACCEPT: complete entry submission (ie no need for further mail)
  - ACCEPT: foreign reply to cross mailing list post (ex: reply from FreeIPMI
    Al Chu to a mail from Arnaud on upsdev...)
  - ACCEPT: people that are already members, with another address.

- spams: always DISCARD, not REJECT, and apply a general ban to this address.

- big messages:
  - source code commits: forward the header, which mentions the changes, but
    not the actual changes details.
  - others (users feedback): ask for attachment compression, or using a link
    to store the file(s).

- other (ie report or request requiring more than 1 mail): REJECT with a
  message explaining the reason. The following can serve as a base:

	Dear XXX,
	Your message to the nut-upsXXX mailing was rejected because you must
	suscribe to the mailing list. This is just to eradicate spam noise from
	the mailing list.

	Use the following link to subscribe to this mailing list:
	https://lists.alioth.debian.org/mailman/listinfo/nut-upsXXX

	where 'XXX' can be replaced by 'user', 'dev' or 'packaging'.

	NUT maintainers


//////////////////////////////////////////////////////////////////////////////
!! DRAFT !!

Release process
===============

New process:
- we will only work on the trunk for the day to day bugfixing and
  standard modifications (what was mostly happening in Testing
  currently),
- the trunk will be used to generate the testing releases (only using
  the tags, after a small freeze period),
- bigger changes, invasive modifications and cutting edge developments
  will have to be addressed in separate branches, until stabilization.
  When things are ok and validated to enter the trunk, merging these
  branches into the trunk can happen.

I insist on the *validation* to enter the trunk, since some changes
might have to wait for major releases, to match our current release
process.

SANDBOX (to be completed and pushed)

* clean up "in-development" bits from files, e.g.:
** TODO etc. referring planned future in the `NEWS` and `UPDATING` files
** comment away the top-most (auto-resolved) NUT version and build date
   in `docs/docinfo.xml.in` -- DO NOT add (or at least commit) an entry
   for the actual fixed release version and date just yet
** NOTE: The `docs/docinfo.xml.sh` script can help update the list for
   existing git tags, if some were skipped before. This can be used to
   cheat a bit about adding the new entry (with a draft tag).
** commit this change (to add a revert-commit after the release tag)

* bump the release identification:
** add an entry in `docs/docinfo.xml` for the actual fixed release version
   and date
** update version to <incremented version> (ex: 2.7.3) in nut/configure.ac
** revise the `NEWS` and `UPDATING` files
** generate/revise Changelog if needed

* create a GPG-signed tag v<incremented version> (ex: v2.7.3)
** try to avoid adding signed tags later (ex. v2.8.0-signed) to avoid the
   mess in GitHub release URLs (or do amend that post-factum), for more
   details see e.g. https://github.com/networkupstools/nut/issues/1971

* `make dist` to store the source tarball, checksum and signature iles

* post-release update of the "in-development" codebase:
** maybe update nut/configure.ac version to <incremented version>.1 (ex: 2.7.3.1)
** `git revert` the commit which cleaned up "in-development" bits above
** Possibly resolve relevant merge conflicts for the changed context

* push commits and tag

* Update `nut-website`:
** rendering should auto-update by NUT CI farm based on source changes,
   but in case of urgency -- can be expedited with a prepared workstation
   (see README of that project) or from the NUT CI farm agent directly
** add an entry to `news.txt`
** update `nut` and `ddl` submodules in nut-website/ to refer to latest info
   as of current release (this should update the website's version as well).
   NOTE: for `nut` submodule be sure to refer to the tagged commit, not to
   the subsequent "in-development" codebase.
** in `source` submodule add a copy of tarball, checksum and hash files for
   download
** `git tag` the website release
** generate and publish a "historic" sub-site snapshot (currently manually)
** update `nut` submodule to current commit ("in-development" codebase), and
   the `historic/index.txt` to refer to the snapshot for reference (users of
   specific-version packages)
** generate and publish the usual website revision (by CI or manually)

* check that the website renders properly

* draft and publish a GitHub release based on the signed tag
** attach the same copy of tarball, checksum and hash files as for nut-website

* announce on mailing list, IRC, etc.

//////////////////////////////////////////////////////////////////////////////
